const id = "provider-para-programadores-en-react.mdx";
						const collection = "writing";
						const slug = "provider-para-programadores-en-react";
						const body = "\r\nEl patrón de comportamiento **Provider** es un patrón de diseño que se utiliza para proporcionar datos a otros componentes. Donde la idea principal es que un componente padre proporcione datos a sus componentes hijos a traves de un arbol de componentes e inyectar dependencias a los componentes hijos de otros **Providers**.\r\n\r\n**Provider** es ademas aquel encargado de _crear_, _almacenar_ y _proporcionar_ los datos a los componentes hijos, donde la procedencia de esta información puede ser de una API, un archivo JSON, una base de datos, etc. Para un **Provider** le es indistinto la procedencia de la información, y es algo que no debe importarle, solo debe manejarla y asegurarse de que la información recibida sea la solicitada.\r\n\r\n## Componentes iniciales\r\n\r\nPara la creación de un **Provider** se requiere plantear su estructura antes de utilizarlo, donde se necesita definir, a que **_modulo_** pertenece, con que **_información_** se va a trabajar, y que **_funciones_** se van a utilizar para manipular la información. Por ende, necesitamos previamente un **_servicio_** que contenga comunicacion con la información, y un **_modelo_** que nos permita manipular la información.\r\n\r\n## Crear un Provider en React con JavaScript\r\n\r\nPara crear un **Provider** escalable, mantenible y reutilizable, se debe seguir una estructura que permita la manipulacion de la información de manera eficiente. Para **React** con JavaScript, es necesario crear alrededor de **cinco archivos**, donde estos compenden: **_Contexto Global_**, **_Acciones_**, **_Reducer_**, **_Provider_** y **_Estado Inicial_**.\r\n\r\n### Estado Inicial\r\n\r\nEl **Estado Inicial** es el encargado de almacenar la información que se va a utilizar en los componentes hijos, y se encarga de proporcionar la información a los componentes hijos. Para crear un **Estado Inicial** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalState.js`\r\n\r\n```jsx\r\nexport const GlobalState = {\r\n  // información inicial\r\n  // Aqui se extrae tambien la información local\r\n  usuario: localStorage.getItem(\"usuario\") || \"\",\r\n};\r\n```\r\n\r\n### Contexto Global\r\n\r\nEl **Contexto Global** es el encargado de almacenar la información que se va a utilizar en los componentes hijos, y se encarga de proporcionar la información a los componentes hijos. Para crear un **Contexto Global** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalContext.js`\r\n\r\n```jsx\r\nimport React, { createContext, useReducer } from \"react\";\r\n\r\nconst GlobalContext = createContext({\r\n  state: GlobalState,\r\n  dispatch: () => {},\r\n  // Funciones extras\r\n});\r\n```\r\n\r\n### Acciones\r\n\r\nLas **Acciones** son las funciones que se encargan de manipular la información del **Estado Inicial**, donde estas funciones se encargan de modificar la información del **Estado Inicial**. Para crear **Acciones** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalActions.js`\r\n\r\n```jsx\r\nexport const setUsuario = (dispatch, usuario) =>\r\n  dispatch({ type: \"SET_USUARIO\", payload: usuario });\r\n\r\nexport const clearUsuario = (dispatch) => dispatch({ type: \"CLEAR_USUARIO\" });\r\n```\r\n\r\n### Reducer\r\n\r\nEl **Reducer** es el encargado de modificar la información del **Estado Inicial**, donde este se encarga de recibir las **Acciones** y modificar la información del **Estado Inicial**. Para crear un **Reducer** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalReducer.js`\r\n\r\n```jsx\r\nexport const GlobalReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USUARIO\":\r\n      return { ...state, usuario: action.payload };\r\n    case \"CLEAR_USUARIO\":\r\n      return { ...state, usuario: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n```\r\n\r\n### Provider\r\n\r\nEl **Provider** es el encargado de proporcionar la información a los componentes hijos, donde este se encarga de almacenar la información del **Estado Inicial** y proporcionarla a los componentes hijos. Para crear un **Provider** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalProvider.jsx`\r\n\r\n```jsx\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(GlobalReducer, GlobalState);\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n```\r\n\r\n### Colocación del Provider\r\n\r\nPara que el **Provider** pueda ser utilizado en los componentes hijos, se debe colocar en donde es requerido, aunque sea tentador colocarlo en el componente raiz, no es recomendable, ya que puede causar problemas de rendimiento. Para colocar el **Provider** se debe plantear correctamente el alcance que deseas que tenga este **Provider**, asi que antes de colocarlo, plantea si es necesario que **TODOS** los componentes van a requerir accesar a la información del **Provider** o solamente es un modulo aislado que solo requiere lo necesario para si mismo.\r\n\r\n`App.js`\r\n\r\n```jsx\r\nimport { GlobalProvider } from \"./GlobalProvider\";\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <Componente />\r\n    </GlobalProvider>\r\n  );\r\n}\r\n```\r\n\r\n### Consumir el Provider\r\n\r\nPara consumir el **Provider** en los componentes hijos, se debe utilizar el **Hook** `useContext` que proporciona **React**. Para consumir el **Provider** se debe utilizar la siguiente estructura:\r\n\r\n`Componente.jsx`\r\n\r\n```jsx\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"./GlobalContext\";\r\n\r\nconst Componente = () => {\r\n  const { state, dispatch } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{state.usuario}</h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Funciones personalizadas\r\n\r\nA veces es necesario crear funciones personalizadas que no esten relacionadas con el **Estado Inicial**, para esto se puede agregar funciones extras al **Contexto Global**. Para agregar funciones extras al **Contexto Global** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalContext.js`\r\n\r\n```jsx\r\nimport React, { createContext, useReducer } from \"react\";\r\n\r\nconst GlobalContext = createContext({\r\n  state: GlobalState,\r\n  dispatch: () => {},\r\n  // Funciones extras\r\n  logoutAndRedirect: () => {},\r\n});\r\n```\r\n\r\n`GlobalProvider.jsx`\r\n\r\n```jsx\r\nexport const GlobalProvider = ({ children }) => {\r\n  const navigate = useNavigate();\r\n  const [state, dispatch] = useReducer(GlobalReducer, GlobalState);\r\n\r\n  const logoutAndRedirect = () => {\r\n    dispatch({ type: \"CLEAR_USUARIO\" });\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch, logoutAndRedirect }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n```\r\n\r\nRecomiendo altamente utilizar las funciones personalizadas cuando se requiere trabajar con el estado del **Provider** e involucra otros procesos o gestionamiento de muchos cambios en el estado. Esto con el fin de _reducir_ la cantidad de código que puede llegar a involucrarse en el lado de la **Vista**, y _mantener_ un orden en la estructura del **Provider**, promoviendo asi la reutilización de código y la escalabilidad del mismo.\r\n\r\n## Crear un Provider en React con TypeScript\r\n\r\nPara crear un **Provider** en **React** con **TypeScript**, se debe seguir la misma estructura que se utiliza en **JavaScript**, pero con la diferencia de que se debe definir el tipo de dato que se va a utilizar en el **Estado Inicial** y en las **Acciones**.\r\n\r\n### Modelo\r\n\r\nEl **Modelo** son los tipos de datos que va a contener el **Estado Inicial**, donde estos deben ser independientes del **Estado Inicial** y no deben tener relacion directa. Para crear un **Modelo** se debe utilizar la siguiente estructura:\r\n\r\n`Usuario.ts`\r\n\r\n```tsx\r\nexport interface Usuario {\r\n  usuario: string;\r\n}\r\n```\r\n\r\n### Estado Inicial\r\n\r\nEl **Estado Inicial** es el encargado de almacenar la información que se va a utilizar en los componentes hijos, y se encarga de proporcionar la información a los componentes hijos. Es importante respetar los modelos planteados y no hacer dependiente el **Estado** con el **_Modelo_**, estos deben ser independientes y no deben tener relacion directa.\r\n\r\nPara crear un **Estado Inicial** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalState.ts`\r\n\r\n```tsx\r\nimport { GlobalModel } from \"./GlobalModel\";\r\n\r\n// La definicion del modelo de nuestro Estado\r\nexport type GlobalState = {\r\n  usuario?: Usuario;\r\n};\r\n\r\n// Estado con el que se arranca al inicio\r\n// Se puede extraer información local\r\nexport const initialState: GlobalState = {\r\n  usuario: { usuario: null },\r\n};\r\n```\r\n\r\n### Acciones\r\n\r\nLas **Acciones** son las funciones que se encargan de manipular la información del **Estado Inicial**, donde estas funciones se encargan de modificar la información del **Estado Inicial**. Para crear **Acciones** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalActions.ts`\r\n\r\n```tsx\r\nimport { Dispatch } from \"react\";\r\n\r\nexport type GlobalActions =\r\n  | { type: \"SET_USUARIO\"; payload: Usuario }\r\n  | { type: \"CLEAR_USUARIO\" };\r\n```\r\n\r\n### Reducer\r\n\r\nEl **Reducer** es el encargado de modificar la información del **Estado Inicial**, donde este se encarga de recibir las **Acciones** y modificar la información del **Estado Inicial**. Para crear un **Reducer** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalReducer.ts`\r\n\r\n```tsx\r\nimport { GlobalState } from \"./GlobalState\";\r\n\r\nexport const GlobalReducer = (\r\n  state: GlobalState,\r\n  action: GlobalActions\r\n): GlobalState => {\r\n  switch (action.type) {\r\n    case \"SET_USUARIO\":\r\n      return { ...state, usuario: action.payload };\r\n    case \"CLEAR_USUARIO\":\r\n      return { ...state, usuario: { usuario: null } };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n```\r\n\r\n### Contexto Global\r\n\r\nEl **Contexto Global** es el encargado de almacenar la información que se va a utilizar en los componentes hijos, y se encarga de proporcionar la información a los componentes hijos. Para crear un **Contexto Global** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalContext.ts`\r\n\r\n```tsx\r\nimport { createContext } from \"react\";\r\nimport { GlobalState } from \"./GlobalState\";\r\n\r\nexport const GlobalContext = createContext<{\r\n  state: GlobalState;\r\n  dispatch: Dispatch<GlobalActions>;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => {},\r\n  // Funciones extras\r\n});\r\n```\r\n\r\n### Provider\r\n\r\nEl **Provider** es el encargado de proporcionar la información a los componentes hijos, donde este se encarga de almacenar la información del **Estado Inicial** y proporcionarla a los componentes hijos. Para crear un **Provider** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalProvider.tsx`\r\n\r\n```tsx\r\nimport { useReducer } from \"react\";\r\nimport { GlobalContext } from \"./GlobalContext\";\r\nimport { GlobalReducer } from \"./GlobalReducer\";\r\nimport { initialState } from \"./GlobalState\";\r\n\r\ntype GlobalProviderProps = {\r\n  children: ReactNode | ReactNode[];\r\n};\r\n\r\nexport default function GlobalProvider({ children }: GlobalProviderProps) {\r\n  const [state, dispatch] = useReducer(GlobalReducer, initialState);\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n```\r\n\r\n### Colocación del Provider\r\n\r\nPara que el **Provider** pueda ser utilizado en los componentes hijos, se debe colocar en donde es requerido, aunque sea tentador colocarlo en el componente raiz, no es recomendable, ya que puede causar problemas de rendimiento. Para colocar el **Provider** se debe plantear correctamente el alcance que deseas que tenga este **Provider**, asi que antes de colocarlo, plantea si es necesario que **TODOS** los componentes van a requerir accesar a la información del **Provider** o solamente es un modulo aislado que solo requiere lo necesario para si mismo.\r\n\r\n`App.tsx`\r\n\r\n```tsx\r\nimport GlobalProvider from \"./GlobalProvider\";\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <Componente />\r\n    </GlobalProvider>\r\n  );\r\n}\r\n```\r\n\r\n### Consumir el Provider\r\n\r\nPara consumir el **Provider** en los componentes hijos, se debe utilizar el **Hook** `useContext` que proporciona **React**. Para consumir el **Provider** se debe utilizar la siguiente estructura:\r\n\r\n`Componente.tsx`\r\n\r\n```tsx\r\nimport { useContext } from \"react\";\r\nimport { GlobalContext } from \"./GlobalContext\";\r\n\r\nconst Componente = () => {\r\n  const { state, dispatch } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{state.usuario.usuario}</h1>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n### Funciones personalizadas\r\n\r\nA veces es necesario crear funciones personalizadas que no esten relacionadas con el **Estado Inicial**, para esto se puede agregar funciones extras al **Contexto Global**. Para agregar funciones extras al **Contexto Global** se debe utilizar la siguiente estructura:\r\n\r\n`GlobalContext.ts`\r\n\r\n```tsx\r\nimport { createContext } from \"react\";\r\nimport { GlobalState } from \"./GlobalState\";\r\n\r\nexport const GlobalContext = createContext<{\r\n  state: GlobalState;\r\n  dispatch: Dispatch<GlobalActions>;\r\n  // Funciones extras\r\n  logoutAndRedirect: () => void;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => {},\r\n  // Funciones extras\r\n  logoutAndRedirect: () => {},\r\n});\r\n```\r\n\r\n`GlobalProvider.tsx`\r\n\r\n```tsx\r\nimport { useReducer } from \"react\";\r\nimport { GlobalContext } from \"./GlobalContext\";\r\nimport { GlobalReducer } from \"./GlobalReducer\";\r\nimport { initialState } from \"./GlobalState\";\r\n\r\ntype GlobalProviderProps = {\r\n  children: ReactNode | ReactNode[];\r\n};\r\n\r\nexport default function GlobalProvider({ children }: GlobalProviderProps) {\r\n  const navigate = useNavigate();\r\n  const [state, dispatch] = useReducer(GlobalReducer, initialState);\r\n\r\n  const logoutAndRedirect = () => {\r\n    dispatch({ type: \"CLEAR_USUARIO\" });\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch, logoutAndRedirect }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n```\r\n\r\nRecomiendo altamente utilizar las funciones personalizadas cuando se requiere trabajar con el estado del **Provider** e involucra otros procesos o gestionamiento de muchos cambios en el estado. Esto con el fin de _reducir_ la cantidad de código que puede llegar a involucrarse en el lado de la **Vista**, y _mantener_ un orden en la estructura del **Provider**, promoviendo asi la reutilización de código y la escalabilidad del mismo.\r\n";
						const data = {title:"Provider para programadores en React",description:"Provider",pubDate:new Date(1728370800000)};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/Omar/Documents/sazarsource/src/content/writing/provider-para-programadores-en-react.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
