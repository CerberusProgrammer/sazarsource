const id = "diseno-atomico-para-novatos.mdx";
						const collection = "writing";
						const slug = "diseno-atomico-para-novatos";
						const body = "\r\nEl diseño atómico es una metodología de diseño que se basa en la creación de componentes de interfaz de usuario. Estos componentes se dividen en cinco categorías: átomos, moléculas, organismos, plantillas y páginas. Cada una de estas categorías representa un nivel de complejidad creciente.\r\n\r\nConsidere que este patrón de arquitectura solo se aplica en la creación de componentes, no en la arquitectura de carpetas, aunque puede nombrar las carpetas de la misma forma que los componentes o con la categoria que le corresponda según el componente a desarrollar en el diseño atómico.\r\n\r\n## Átomos\r\n\r\nLos átomos son los componentes más básicos de la interfaz de usuario. Estos componentes son indivisibles y no pueden descomponerse en partes más pequeñas. Algunos ejemplos de átomos son los botones, los campos de texto y las etiquetas.\r\n\r\nCapte que los átomos no tienen lógica de negocio, solo presentan información. Por lo tanto, los átomos no deben contener lógica de negocio. No deben realizar llamadas a la API, ni manejar el estado de la aplicación. Son componentes puramente visuales y deben ser reutilizables en cualquier parte de la aplicación.\r\n\r\nUn componente de tipo átomo debe ser agnóstico a la lógica de negocio, y debe ser reutilizable en cualquier parte de la aplicación. No utilice nombres de clases que hagan referencia a la lógica de negocio, ni nombres de clases que hagan referencia a la ubicación del componente en la aplicación. Deben ser nombres completamente genéricos, fáciles de entender, recordar y extremadamente obvios en su uso.\r\n\r\n### Ejemplo de átomos\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\ninterface Props = {\r\n    label: string;\r\n    onClick: () => void;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst Button = ({ label, onClick, children }: Props) => (\r\n    <button onClick={onClick}>\r\n        {label}\r\n        {children}\r\n    </button>\r\n);\r\n```\r\n\r\nEn este ejemplo el componente `Button` es un átomo, ya que es un componente básico que no puede descomponerse en partes más pequeñas. El componente `Button` recibe tres propiedades: `label`, `onClick` y `children`. La propiedad `label` es el texto que se mostrará en el botón, la propiedad `onClick` es la función que se ejecutará cuando se haga clic en el botón y la propiedad `children` es el contenido que se mostrará dentro del botón. El componente `Button` no tiene lógica de negocio, solo presenta información. Nótese ademas que su nombre es completamente generico y no hace referencia a la lógica de negocio, ni a la ubicación del componente en la aplicación.\r\n\r\n## Moléculas\r\n\r\nLas moléculas son componentes que se componen de uno o más átomos. Estos componentes son más complejos que los átomos, pero siguen siendo componentes básicos que no pueden descomponerse en partes más pequeñas. Algunos ejemplos de moléculas son los formularios, las tarjetas y los menús.\r\n\r\nCapte que las moléculas no tienen lógica de negocio, solo presentan información. Por lo tanto, las moléculas no deben contener lógica de negocio. No deben realizar llamadas a la API, ni manejar el estado de la aplicación. Son componentes puramente visuales y deben ser reutilizables en cualquier parte de la aplicación.\r\n\r\nUn componente de tipo molécula debe ser agnóstico a la lógica de negocio, y debe ser reutilizable en cualquier parte de la aplicación. No utilice nombres de clases que hagan referencia a la lógica de negocio, ni nombres de clases que hagan referencia a la ubicación del componente en la aplicación. Deben ser nombres completamente genéricos, fáciles de entender, recordar y extremadamente obvios en su uso.\r\n\r\n### Ejemplo de moléculas\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\ninterface Props = {\r\n    title: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst Card = ({ title, children }: Props) => (\r\n    <div>\r\n        <h2>{title}</h2>\r\n        {children}\r\n    </div>\r\n);\r\n```\r\n\r\nEn este ejemplo el componente `Card` es una molécula, ya que es un componente que se compone de uno o más átomos. El componente `Card` recibe dos propiedades: `title` y `children`. La propiedad `title` es el título que se mostrará en la tarjeta y la propiedad `children` es el contenido que se mostrará dentro de la tarjeta. El componente `Card` no tiene lógica de negocio, solo presenta información. Nótese ademas que su nombre es completamente generico y no hace referencia a la lógica de negocio, ni a la ubicación del componente en la aplicación.\r\n\r\n## Organismos\r\n\r\nLos organismos son componentes que se componen de uno o más átomos y moléculas. Estos componentes son más complejos que los átomos y las moléculas, ya que pueden descomponerse en partes más pequeñas. Algunos ejemplos de organismos son los encabezados, los pies de página y los menús de navegación.\r\n\r\nCapte que los organismos puede llegar a tener lógica de negocio, ya que pueden manejar el estado de la aplicación y realizar llamadas a la API.\r\n\r\nPara este punto debe notar que un `Organismo` puede llegar a ser el `Appbar` de su aplicacion o el `Drawer` puede verse sumamente tentado a colocar la lógica de negocio en estos componentes, pero es recomendable delegar la lógica de negocio a los contenedores, sea cuidadoso, ya que es donde mas errores puede cometer. Pero entiendase que el diseño atómico busca en todo momento estar debilmente acoplado en cualquier momento y no depender de ningun otro. Si el dia de manaña se decide cambiar la lógica de negocio, no deberia afectar en nada a los componentes de la aplicación.\r\n\r\n### Ejemplo de organismos\r\n\r\n#### `Drawer.tsx`\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\ninterface Props = {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst Drawer = ({ open, onClose, children }: Props) => (\r\n    <div style={{ display: open ? 'block' : 'none' }}>\r\n        <button onClick={onClose}>Cerrar</button>\r\n        {children}\r\n    </div>\r\n);\r\n```\r\n\r\nEn este ejemplo el componente `Drawer` es un organismo, ya que es un componente que se compone de uno o más átomos y moléculas. El componente `Drawer` recibe tres propiedades: `open`, `onClose` y `children`. La propiedad `open` es un booleano que indica si el cajón está abierto o cerrado, la propiedad `onClose` es la función que se ejecutará cuando se cierre el cajón y la propiedad `children` es el contenido que se mostrará dentro del cajón. El componente `Drawer` puede tener lógica de negocio, ya que puede manejar el estado de la aplicación y realizar llamadas a la API. Pero\r\nintente a toda costa mantenerlo afuera de este componente.\r\n\r\n## Plantillas\r\n\r\nLas plantillas son componentes que se componen de uno o más átomos, moléculas y organismos. Algunos ejemplos de plantillas son las páginas de inicio, las páginas de perfil y las páginas de configuración.\r\n\r\nSe da la confusion normalmente entre `Molecula` y `Plantilla`, ya que en teoria suenan similares. Pero es importante que note la diferencia entre ambas. No intente sobreanalizar o sobrecomplicar las cosas, si un componente se compone de uno o más `Moleculas` y `Organismos`, entonces es una `Plantilla`. Si un componente se compone de uno o más `Atomos` y `Moleculas`, entonces es una `Molecula`.\r\n\r\n### Ejemplo de plantillas\r\n\r\n#### `ProfileLayout.tsx`\r\n\r\n```tsx\r\nimport React from 'react';\r\n\r\nimport Header from './Header';\r\nimport Card from './Card';\r\nimport Button from './Button';\r\n\r\ninterface Props = {\r\n    title: string;\r\n    children: React.ReactNode;\r\n};\r\n\r\nconst ProfileLayout = ({ title, children }: Props) => (\r\n    <div>\r\n        <Header title={title} />\r\n        <Card title=\"Perfil\">\r\n            {children}\r\n        </Card>\r\n    </div>\r\n);\r\n```\r\n\r\nEn este ejemplo el componente `ProfileLayout` es una plantilla, ya que es un componente que se compone de uno o más átomos, moléculas y organismos. El componente `ProfileLayout` recibe dos propiedades: `title` y `children`. La propiedad `title` es el título que se mostrará en la página de perfil y la propiedad `children` es el contenido que se mostrará dentro de la página de perfil. El componente `ProfileLayout` puede tener lógica de negocio, ya que puede manejar el estado de la aplicación y realizar llamadas a la API. Pero repitiendo de nuevo, aunque este tentado a colocar la lógica de negocio en este componente, se recomienda delegar la lógica de negocio a los contenedores, debido que mientras mas limpio y agnóstico mantenga la plantilla, mas veces se podra reutilizar en la aplicación.\r\n\r\nPor favor, sea cuidadoso en el nivel de plantilla, ya que es el nivel donde mas errores puede cometer. Si el dia de manaña se decide cambiar la lógica de negocio, no deberia afectar en nada a los componentes de la aplicación.\r\n\r\n## Páginas\r\n\r\nLas páginas son mucho mas fáciles de entender, debido a que es explicitamente lo que el usuario entiende como una página. La pagina es el nivel mas alto de la jerarquia de componentes, y aqui es donde se hace el cloromerado de todos los componentes que se han creado en los niveles anteriores.\r\n\r\nAqui puede ignorar la regla de no colocar lógica de negocio en los componentes, ya que en este nivel es donde se debe colocar toda la lógica de negocio de la aplicación. Aqui es donde se debe manejar el estado de la aplicación y realizar llamadas a la API.\r\n\r\n### Ejemplo de páginas\r\n\r\n#### `ProfilePage.tsx`\r\n\r\n```tsx\r\nimport React from \"react\";\r\n\r\nimport ProfileLayout from \"./ProfileLayout\";\r\n\r\nconst ProfilePage = () => (\r\n  <ProfileLayout title=\"Perfil\">\r\n    <form>\r\n      <label>Nombre</label>\r\n      <input type=\"text\" />\r\n      <label>Apellido</label>\r\n      <input type=\"text\" />\r\n      <Button label=\"Guardar\" onClick={() => console.log(\"Guardar\")} />\r\n    </form>\r\n  </ProfileLayout>\r\n);\r\n```\r\n\r\n## Referencias\r\n\r\n- [Atomic Design Methodology](https://atomicdesign.bradfrost.com/chapter-2/?source=post_page-----2bb4d9ca5f97--------------------------------)\r\n";
						const data = {title:"Diseño atómico para novatos",description:"Aprende a utilizar el diseño atómico",pubDate:new Date(1727766000000)};
						const _internal = {
							type: 'content',
							filePath: "C:/Users/Omar/Documents/sazarsource/src/content/writing/diseno-atomico-para-novatos.mdx",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
